Tutorials, xena, etc

trouble with sets (undecidable)

Playing around with bijections (wanted to do combinatorics stuff)
trouble trying to define abs and with coercion
how to define bijection (my initial attempt vs scott's) 
Typeclasses and inference
Naive bijection nat int is tedious, Scott suggests composition
How to show composition of bijections is bijection (notation is annoying)

A good strategy is to look in the proof of integer lemmas because they are often based off nat lemmas
had trouble pattern matching ( can't simply list all members of fin n?)
stuck pattern matching inside proof (want to pattern match on nat \times fin 2)

Talked with Scott and decided to fill out a bunch of algebra that isn't there (Euclidean domains)
How do I fill out the fields of euclidean_domain which are inherited given \Z is (hopefully) already an integral_domain? 

Problem : lemmas are for abs instead of nat_abs
- prove abs lemmas for nat_abs
- use abs then convert to nat

why can't we automatically coerce an object into a parent? (we can)

how to work out eea order without explicit function? (it doesn't matter)
spent ages trying to write eea (I was right all along but lean prints negatives funny)
Why doesn't lean know fields don't have zero divisors?

why euclidean_domain does not have explicit Euclidean function (it's about equality of euclidean domains)

What needs to be given for eea to construct the proof at each step?
- coefficients proof
- proof remainders divide a and b
- proof a greatest divisor of remainers is a greatest divisor of a and b

How to bulk apply stuff like add_comm? (ring tactic is nice)

if then else is ite rather than dite (despite what the textbook claims)?
How to define ordering on inputs
- is exists strong enough in lean to do what we want?

When showing recursion is valid lean asks you to give a well founded relation on the return type (I think). Shouldn't it be valid to just show one exists?

How do I break down a structure into its projections and then apply it? simp doesn't like me. (wasn't actually function application)
How do I use induction on the output of a function (problem is that lean forgets the value of the function)