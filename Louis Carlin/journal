Tutorials, xena, etc

trouble with sets (undecidable)

Playing around with bijections (wanted to do combinatorics stuff)
trouble trying to define abs and with coercion
how to define bijection (my initial attempt vs scott's) 
Typeclasses and inference
Naive bijection nat int is tedious, Scott suggests composition
How to show composition of bijections is bijection (notation is annoying)

A good strategy is to look in the proof of integer lemmas because they are often based off nat lemmas
had trouble pattern matching ( can't simply list all members of fin n?)
stuck pattern matching inside proof (want to pattern match on nat \times fin 2)

Talked with Scott and decided to fill out a bunch of algebra that isn't there (Euclidean domains)
How do I fill out the fields of euclidean_domain which are inherited given \Z is (hopefully) already an integral_domain? 

Problem : lemmas are for abs instead of nat_abs
- prove abs lemmas for nat_abs
- use abs then convert to nat

why can't we automatically coerce an object into a parent? (we can)

spent ages trying to write eea (I was right all along but lean prints negatives funny)